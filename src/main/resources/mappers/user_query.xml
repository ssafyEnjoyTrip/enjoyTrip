<?xml version="1.0" encoding="UTF-8"?>
	
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.enjoyTrip.dao.UserDao">
	<select id="userDetail" parameterType="String" resultType="com.example.enjoyTrip.dto.UserDto">
		select user_id, user_password, user_email, user_name, user_age
		from user where user_id = #{userId}
	</select>
	
	<!-- return이 Collections 이면 Dto만 기술 -> 리턴타입에 List 안와도 됨 -->
	<select id="userList" resultType="com.example.enjoyTrip.dto.UserDto">
		select user_id, user_password, user_email, user_name, user_age
		from user
	</select>
	
	<!-- return이 primitive 타입 이면 별도로 기술할 필요가 없다. (int) -->
	<insert id="userInsert" parameterType="com.example.enjoyTrip.dto.UserDto">
		insert into user (user_id, user_password, user_email, user_name, user_age)
		values(#{userId},#{userPassword},#{userEmail},#{userName},#{userAge})
	</insert>
	
	<update id="userUpdate" parameterType="com.example.enjoyTrip.dto.UserDto">
		update user set user_password=#{userPassword}, user_email=#{userEmail}, user_name=#{userName}, user_age=#{userAge}
		where user_id = #{userId}
	</update>
	
	<delete id="userDelete" parameterType="String">
		delete from user where user_id = #{userId}
	</delete>
	
	<!-- 로그인 체크 -->
	<select id="loginCheck" parameterType="com.example.enjoyTrip.dto.UserDto" resultType="com.example.enjoyTrip.dto.UserDto">
		select user_id, user_password, user_email, user_name, user_age
		from user where user_id = #{userId} and user_password = #{userPassword}
	</select>
	
</mapper>